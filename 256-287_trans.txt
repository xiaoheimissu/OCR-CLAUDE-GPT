以下是经过校对和润色的翻译：

# 表达式

编程就像性：它可能会产生一些具体的结果，但这并不是我们做它的原因。-- 向理查德·费曼致歉

## 10.1 引言

本章将详细讨论表达式。在C++中，赋值是表达式，函数调用是表达式，对象的构造也是表达式，除此之外，许多操作超出了传统算术表达式的范围。为了展示表达式的使用并将其置于上下文中，我首先展示一个小型完整程序——一个简单的"桌面计算器"。接下来，我会列出完整的运算符集合，并简要说明它们对内置类型的含义。需要更详细解释的运算符将在第11章讨论。

例如：

`r = 2.5`  
`area = pi * r * r`

(pi 预定义) 计算器程序将会输出：

`2.5`  
`19.635`

其中，2.5 是第一行输入的结果，19.635 是第二行的结果。

该计算器由四个主要部分组成：解析器、输入函数、符号表和驱动程序。实际上，它是一个微型编译器，其中解析器负责语法分析，输入函数负责输入和词法分析，符号表存储永久性信息，驱动程序负责初始化、输出和错误处理。我们可以为这个计算器添加许多功能以使其更有用，但代码已经足够长了，大多数功能的添加只会增加代码量，而不会在C++使用方面提供更多的见解。

## 10.2.1 解析器

以下是计算器接受的语言的语法：

```
program:
end
expr_list end         // end 表示输入结束

expr_list:
expression print      // print 表示换行符或分号
expression print expr_list

expression:
expression + term
expression - term
term

term:
term / primary
term * primary
primary

primary:
number               // number 是浮点数字面量
name                 // name 是标识符
name = expression    // name = 表达式
( expression )
```

# Token 的定义如下：

```cpp
enum class Kind : char {
  name, number, end,
  plus='+', minus='-', mul='*', div='/', print=';', assign='=', lps='(', rps=')'
};

struct Token {
  Kind kind;
  string string_value;
  double number_value;
};
```

通过字符的整数值来表示每个Token既便捷又高效，对于使用调试器的人也有帮助。只要没有输入的字符值与枚举的值冲突，这种方法就有效——目前我所知道的没有字符集的打印字符是单个数字值。

Token_stream 的接口如下：

```cpp
class Token_stream {
public:
  Token get(); // 读取并返回下一个Token
  const Token& current(); // 最近读取的Token
  // ...
};
```

实现将在§10.2.2中介绍。每个解析器函数都会接收一个bool (§6.2.2)参数，称为get，指示该函数是否需要调用Token_stream::get()来获取下一个Token。每个解析器函数评估"它的"表达式，形式为：

```cpp
for (;;) {
  switch (ts.current().kind) {
    case Kind::plus:
      left += term(true);
      break;
    case Kind::minus:
      left -= term(true);
      break;
    default:
      return left;
  }
}
```

这个函数本身并没有做太多工作。典型的大程序中的高级函数通常调用其他函数来完成具体工作。

switch语句 (§2.2.4, §9.4.2) 会测试其条件的值，条件在switch关键字后面的括号中提供。break语句用于退出switch语句。如果测试的值与任何case标签不匹配，则选择default。程序员不需要提供default。

请注意，像2-3+4这样的表达式按照语法规则被解析为(2-3)+4。奇怪的符号 for(;;) 是指定无限循环的一种方式：你可以将其读作"永远循环"（§9.5）；while(true) 也是一种替代方案。switch语句会被重复执行，直到找到不同于+和-的情况，然后在default情况下执行return语句。

运算符++和--用于处理加法和减法；left+=term(true) 和 left-=term(true) 也可以使用，且不会改变程序的含义。然而，left+=term(true) 和 left-=term(true) 不仅更简洁，还能更直接地表达意图。每个赋值运算符都是一个单独的词法Token，因此a + = 1; 是语法错误，因为a和+之间不允许有空格。

C++为二元运算符提供了赋值运算符：

```
+ - * / % & | ^ << >>
```

因此，以下赋值运算符是可能的：

```
= += -= *= /= %= &= |= ^= <<= >>=
```

% 是模除或取余运算符；& | ^ << >> 分别是按位与、按位或、按位异或、左移和右移运算符；x@=y 表示 x=x@y，除了x只被评估一次。

# 处理乘除法的代码如下：

```cpp
for (;;) {
  switch (ts.current().kind) {
    case Kind::mult:
      left *= prim(true);
      break;
    case Kind::div:
      if (auto d = prim(true)) {
        left /= d;
        break;
      }
      return error("除以0");
    default:
      return left;
  }
}
```

除以零的结果是未定义的，通常会导致灾难。因此，我们在除法前先测试是否为0，并在检测到零除数时调用error()。error()函数在§10.2.4中描述。变量d在程序中被引入并立即初始化，正好在它需要的地方。条件中引入的名字的作用域是受该条件控制的语句，结果值就是条件的值 (§9.4.3)。因此，除法和赋值 left /= d 仅在d非零时才会执行。

处理primary的函数prim()类似于expr()和term()，但由于我们在调用层次中越来越低，做了一些实质性的工作，因此不再需要循环：

```cpp
double prim(bool get)
{
  if (get) ts.get(); // 读取下一个Token
  switch (ts.current().kind) {
    case Kind::number:
    {
      double v = ts.current().number_value;
      ts.get();
      return v;
    }
    case Kind::name:
    {
      double& v = table[ts.current().string_value];
      if (ts.get().kind == Kind::assign) v = expr(true);
      return v;
    }
    default:
      return error("期望primary");
  }
}
```

当看到一个表示数字的Token（即整数或浮点数字面量）时，其值被存储在number_value中。同样，当看到一个表示名称的Token（无论如何定义；见§10.2.2和§10.2.3）时，其值被存储在string_value中。

请注意，prim()总是多读一个Token，而不是仅用于分析它的primary表达式。这是因为在某些情况下（例如，检查一个名称是否被赋值）必须这样做，所以为了保持一致，它在所有情况下都这样做。在解析器函数只想推进到下一个Token的情况下，它不会使用ts.get()的返回值。这没问题，因为我们可以从ts.current()获取结果，而无需返回值或显式"丢弃"结果：void(ts.get())。

在对一个名称进行任何操作之前，计算器必须首先向前查看它是被赋值还是仅仅读取。在这两种情况下，都会查询符号表。符号表是一个映射 (§4.4.3, §31.4.3)：

```cpp
map<string,double> table;
```

也就是说，当通过字符串索引table时，结果值是对应于该字符串的double。例如，如果用户输入

```
radius = 6378.388;
```

计算器将到达 Kind::name 情况并执行

```cpp
double& v = table["radius"];
// ... expr() 计算要赋值的值 ...
v = 6378.388;
```

引用v用于保留与radius相关的double值，同时expr()从输入字符中计算值6378.388。

第14章和第15章讨论了如何将程序组织为一组模块。然而，除了一个例外，本例中的计算器声明可以按顺序排列，使得每个声明都在使用之前被声明。例外情况是expr()调用term()，term()调用prim()，而prim()又调用expr()。这个调用循环必须以某种方式被打破。一个声明

```cpp
double expr(bool);
```

在prim()的定义之前会很好地解决问题。

# Token_stream

```cpp
class Token_stream {
public:
  Token_stream(istream& s) : ip(&s), owns(false) { }
  Token_stream(istream* p) : ip(p), owns(true) { }

  ~Token_stream() { close(); }

  Token get(); // 读取并返回下一个Token
  Token& current(); // 最近读取的Token

  void set_input(istream& s) { close(); ip = &s; owns=false; }
  void set_input(istream* p) { close(); ip = p; owns=true; }

private:
  void close() { if (owns) delete ip; }

  istream* ip; // 输入流的指针
  bool owns; // Token_stream是否拥有该输入流
  Token ct { Kind::end }; // 当前Token
};
```

我们使用输入流 (§4.3.2, 第38章) 初始化Token_stream，从中获取字符。Token_stream实现了一个约定，即它拥有作为指针传递的istream（最终会删除：§3.2.1.2, §11.2），但不拥有作为引用传递的istream。对于这个简单的程序来说，这可能有些复杂，但对于那些持有需要释放的资源指针的类来说，这是一个有用且通用的技术。

一个Token_stream持有三个值：指向其输入流的指针(ip)，一个布尔值(owns)，指示对输入流的所有权，以及当前的Token(ct)。我为它赋予了一个默认值，因为不这样做显得不够严谨。人们不应该在调用get()之前调用current()，但如果他们这样做了，他们会得到一个定义明确的Token。我选择Kind::end作为初始值，这样一个误用current()的程序不会得到一个不在输入流中的值。

我将Token_stream::get()分为两个阶段。首先，我提供一个表面上看起来很简单的版本，但它对用户提出了要求。接下来，我将其修改为一个稍微不那么优雅但更易于使用的版本。get()的基本思路是读取一个字符，使用该字符决定需要组成哪种类型的Token，在需要时读取更多字符，然后返回表示所读取字符的Token。

```cpp
switch (ch) {
  case 0:
    return ct={Kind::end}; // 赋值并返回
}
```

默认情况下，运算符 >> 会跳过空白字符（即空格、制表符、换行符等），如果输入操作失败，则ch的值保持不变。因此，ch==0 表示输入结束。

赋值是一个运算符，赋值的结果是被赋值的变量的值。这允许我在同一语句中将Kind::end的值赋给ct并返回。

将一个语句而非两个语句组合在一起，比单独处理ct的成员要更清晰。{Kind::end} 等价于 {Kind::end,0,0}。如果我们关心Token的后两个成员，这是有好处的；如果我们担心性能，这则不太理想。这里两者都不适用，但通常来说，处理完整对象比单独操作数据成员更清晰且更不易出错。下面的情况展示了另一种策略的例子。

在考虑完整函数之前，先单独考虑其中一些情况。表达式终止符；、括号和运算符都可以通过简单地返回它们的值来处理：

```cpp
case ';': // 表达式结束；打印
case '(': case ')':
case '+': case '-': case '*': case '/': case '%':
  return ct={Kind(ch),string(1,ch),0};
```
Here's the polished translation with corrections and improvements:

### 10.2.3 低级输入

使用目前定义的计算器会发现一些不便之处。每次在表达式后添加分号以打印其值很麻烦，而仅以空白字符结束的名称也很令人困扰。例如，`x = 7` 被视为一个标识符，而不是标识符 `x` 后跟操作符 `=` 和数字 7。为了得到我们通常想要的结果，我们需要在 `x` 后添加空格：`x = 7`。这两个问题都可以通过在 `get()` 中用读取单个字符的代码替换面向类型的默认输入操作来解决。

首先，我们将换行符等同于用来标记表达式结束的分号：

```cpp
Token Token_stream::get()
{
  char ch;
  do { // 跳过空白字符，除了 '\n'
    if (!Ip->get(ch)) return ct=(Kind::end);
  } while (ch!='\n' && isspace(ch));

  switch (ch) {
  case '\n':
  case ';':
    return ct=(Kind::print);
  }
```

这里使用了 `do` 语句；它等价于 `while` 语句，但受控语句至少执行一次。`Ip->get(ch)` 调用从输入流中读取一个字符。默认情况下，`get()` 不会像 `>>` 那样跳过空白字符。测试 `if (!Ip->get(ch)) return ct=(Kind::end);` 在到达输入末尾时成功，此时我们返回 `Kind::end` 令牌以终止计算器会话。使用 `!` 操作符是因为 `get()` 成功时返回 `true`。

跳过空白字符后，使用下一个字符来确定即将到来的词法标记的类型。

由于 `>>` 在遇到空白字符之前一直读取到字符串中的问题，可以通过逐个读取字符直到找到非字母或非数字字符来解决：

```cpp
default:
if (isalpha(ch)) {
  string_value = ch; 
  while (Ip->get(ch) && isalnum(ch))
    string_value += ch; // 将 ch 附加到 string_value 的末尾
  Ip->putback(ch);
  return ct=(Kind::name);
}
```

幸运的是，这两个改进都可以通过修改代码的一个局部部分来实现。构建程序时，使改进能够通过局部修改来实现是一个重要的设计目标。

你可能会担心逐个字符添加到字符串末尾会效率低下。对于非常长的 `string` 确实如此，但所有现代的 `string` 实现都提供了"小字符串优化"（§19.3.3）。这意味着构建我们可能用作计算器（甚至编译器）中的名称的字符串不涉及任何效率低下的操作。特别是，使用短字符串不需要使用自由存储。短字符串的最大字符数依赖于实现，但14个字符是一个合理的猜测。

## 10.2.4 错误处理

检测和报告错误总是很重要的。然而，对于这个程序，一个简单的错误处理策略已经足够。`error()` 函数只需统计错误数，写出错误信息，并返回：

```cpp
int no_of_errors;

double error(const string& s) 
{
  no_of_errors++;
  cerr << "error: " << s << '\n';
  return 1;
}
```

流 `cerr` 是一个通常用于报告错误的非缓冲输出流（§38.1）。返回一个值的原因是，错误通常发生在表达式的计算过程中，因此我们应该要么完全中止该计算，要么返回一个不太可能导致后续错误的值。对于这个简单的计算器，后者已经足够。如果 `Token_stream::get()` 遇到了错误，它将返回一个不太可能导致后续错误的值。

## 10.2.5 驱动程序

程序的所有部分都已就位，我们只需要一个驱动程序来启动程序。我决定使用两个函数：`main()` 用于设置和错误报告，`calculate()` 用于处理实际的计算：

```cpp
Token_stream ts {cin}; // 从 cin 获取输入

void calculate() 
{
  for (;;) {
    ts.get(); 
    if (ts.current().kind == Kind::end) break;
    if (ts.current().kind == Kind::print) continue;
    cout << expr(false) << '\n';
  }
}

int main()
{ 
  table["pi"] = 3.14159265358979323846; // 插入预定义的名称
  table["e"] = 2.71828182845904523536;

  calculate(); 
  
  return no_of_errors;
}
```

通常，`main()` 在程序正常终止时返回零，否则返回非零（§2.2.1）。返回错误的数量很好地实现了这一点。实际上，唯一需要的初始化就是将预定义的名称插入符号表中。`main()` 循环的主要任务（在 `calculate()` 中）是读取表达式并输出其值。通过以下代码实现：

```cpp
cout << expr(false) << '\n';
```

参数 `false` 告诉 `expr()` 它不应该打印结果。

### 10.2.7 命令行参数

在编写和测试程序之后，我发现首先启动程序，然后输入表达式，最后退出是件麻烦事。我最常见的用法是计算单个表达式。如果该表达式可以作为命令行参数传递，便可以减少一些按键操作。程序通过调用 `main()` 开始（§2.2.1，§15.4）。当调用 `main()` 时，它会接收两个参数，分别指定参数的数量（传统上称为 `argc`）和一个参数数组（传统上称为 `argv`）。参数是 C 风格的字符串（§2.2.5，§7.3），因此 `argv` 的类型是 `char* argv[]`。程序的名称（在命令行中出现的名称）作为 `argv[0]` 传递，因此 `argc` 总是至少为 1。参数列表是以零结尾的，也就是说，`argv[argc] == 0`。

例如，对于命令

```
dc 150/1.1934
```

参数的值如下：

| argc | argv |
| --- | --- |
| 2 | "dc" |
|   | "150/1.1934" |

因为调用 `main()` 的约定与 C 共享，所以使用 C 风格的数组和字符串。其思想是从命令字符串中读取，就像我们从输入流中读取一样。从字符串中读取的流自然称为 `istringstream`（§38.2.2）。因此，要计算命令行中提供的表达式，我们只需让 `Token_stream` 从适当的 `istringstream` 中读取：

```cpp
case 1:
    break;
case 2:
    ts.set_input(new istringstream(argv[1]));
    break;
default:
    error("too many arguments");
    return 1;
}

table["pi"] = 3.14159265358979323885;
table["e"] = 2.71828182845904523354;

calculate();

return no_of_errors;
```

要使用 `istringstream`，请包含 `<sstream>`。

修改 `main()` 以接受多个命令行参数很容易，但这似乎没有必要，特别是因为多个表达式可以作为单个参数传递：

```
dc "1.2+3.4 15/2 sin(pi/4)"
```

我在我的 UNIX 系统上使用引号，因为空格是命令分隔符。其他系统在程序启动时提供参数的方式有所不同。

尽管 `argc` 和 `argv` 非常简单，但它们仍然是一些轻微但令人烦恼的错误的来源。为了避免这些问题，尤其是为了方便传递程序参数，我倾向于使用一个简单的函数来创建一个 `vector<string>`：

```cpp
vector<string> arguments(int argc, char* argv[]) 
{ 
  vector<string> res; 
  for (int i = 0; i != argc; ++i) 
    res.push_back(argv[i]); 
  return res; 
}
```

更复杂的参数解析函数也并不罕见。

### 10.2.8 关于风格的说明

对于不熟悉关联数组的程序员来说，使用标准库中的 `map` 作为符号表几乎像是在"作弊"。事实上并不是。标准库和其他库就是为了使用而设计的。通常，库的设计和实现比用户可能提供的更为周到。库是一种资源，应加以利用，而不是一个需要解决的问题。
None
None
## 10.5.2.1 整数转换

整数可以转换为另一种整数类型。普通枚举值可以转换为整数类型（§8.4.2）。

如果目标类型是`unsigned`，转换结果是源整数模2^n的最小无符号整数，其中n是表示目标类型所使用的位数。更精确地说，结果是将源位模式视为无符号整数的表示，然后将该值表示为目标类型中的有符号或无符号整数。

如果目标类型是`signed`，在目标类型可以表示该值的情况下，值保持不变；否则，结果是实现定义的。

## 10.5.2.3 指针和引用转换

任何指向对象类型的指针都可以隐式转换为`void*`（§7.2.1）。指向派生类的指针（引用）可以隐式转换为指向可访问且不模糊的基类的指针（引用）（§20.2）。注意，函数指针或成员指针不能隐式转换为`void*`。

求值为`0`的常量表达式（§10.4）可以隐式转换为任何指针类型的空指针。同样，求值为`0`的常量表达式可以隐式转换为成员指针类型（§20.6）。例如：

`int* p = (1+2)-(3-1);` // 可以，但奇怪

优先使用`nullptr`（§7.2.2）。

`T*`可以隐式转换为`const T*`（§7.5）。同样，`T&`可以隐式转换为`const T&`。

## 10.5.2.4 成员指针转换

成员指针和引用可以按照§20.6.3中的描述进行隐式转换。

## 10.5.2.5 布尔转换

指针、整数和浮点值可以隐式转换为`bool`（§6.2.2）。非零值转换为`true`；零值转换为`false`。例如：

```cpp
void f(int* p, int i)
{
    bool is_not_zero = p; // 如果p!=0，则为true
    bool b2 = i; // 如果i!=0，则为true
    // ...
    if (p) do_something(*p); // OK
    if (q!=nullptr) do_something(*q); // OK，但冗长
    
    if(p);
    fb(p); // 错误：没有指针到int的转换
    fb(i); // OK：整数到bool的转换（令人惊讶！？）
}

希望编译器对`fb(p)`发出警告。
```

## 10.5.2.6 浮点-整数转换

当浮点值转换为整数值时，小数部分被丢弃。换句话说，从浮点类型到整数类型的转换是截断的。例如，`int(2.7)`的值是`2`。如果截断后的值不能在目标类型中表示，行为是未定义的。例如：

```cpp
int i = 2.7; // i变为2
char b = 2000.7; // 对于8位字符未定义：2000不能表示为8位字符
```

从整数到浮点类型的转换在硬件允许的范围内是尽可能精确的。如果一个整数值不能精确表示为浮点类型的值，结果是如果出现整数值时的结果。

在`int`和`float`都使用32位表示的机器上，`i`的值是`1234567936`。

显然，最好避免可能破坏值的隐式转换。实际上，编译器可以检测并警告一些明显危险的转换，如浮点到整数和`long int`到`char`的转换。然而，通用的编译时检测是不切实际的，因此程序员必须小心。当"小心"还不够时，程序员可以插入显式检查。例如：

```cpp
char checked_cast(int i)
{
    char c = i; // 警告：不可移植 (§10.5.2.1)
    if (i != c) throw std::runtime_error("int到char的检查失败");
    return c;
}

void my_code(int i)
{
    char c = checked_cast(i);
    // ...
}
```

这些转换在二元运算符的操作数上执行，以将它们带入共同类型，然后该类型用作结果的类型：[1] 如果任一操作数是`long double`类型，另一个转换为`long double`。否则，如果任一操作数是`double`，另一个转换为`double`。否则，如果任一操作数是`float`，另一个转换为`float`。否则，对两个操作数进行整数提升（§10.5.1）。[2] 否则，如果任一操作数是`unsigned long long`，另一个转换为`unsigned long long`。否则，如果一个操作数是`long long int`而另一个是`unsigned long int`，那么如果`long long int`可以表示所有`unsigned long int`的值，则`unsigned long int`转换为`long long int`；否则，两个操作数都转换为`unsigned long long int`。否则，如果任一操作数是`unsigned long long`，另一个转换为`unsigned long long`。否则，如果一个操作数是`long int`而另一个是`unsigned int`，那么如果`long int`可以表示所有`unsigned int`的值，则`unsigned int`转换为`long int`；否则，两个操作数都转换为`unsigned long int`。否则，如果任一操作数是`long`，另一个转换为`long`。否则，如果任一操作数是`unsigned`，另一个转换为`unsigned`。否则，两个操作数都是`int`。这些规则使将无符号整数转换为可能更大尺寸的有符号整数的结果成为实现定义的。这是另一个避免混合使用无符号和有符号整数的理由。
